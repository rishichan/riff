c
n
c
s
params
ListenerService
n
step
params
c
n
c
n
c
step
n
step
params
c
res
c
n
listener
c
params
c
params[:listener_id]!=params[:current_user_id]
c
params.merge(current_user_id: @current_user_id)
c
n
params[:current_user_id]
music[:artist_id]
music[:artist_id]!=params[:current_user_id]
music
c
params
c
a
c
n
result
n
c
params[:artist_id]!=params[:current_user_id]
c
step
c
params.merge(current_user_id: @current_user_id)
c
n
params[:artist_id]!=params[:current_user_id]
params
c
error!(result[:error], result[:status])
n
params[:current_user_id]
params[:artist_id]
params[:artist_id]!=params[:current_user_id]
c
result[:error]
n
params
c
params.merge(current_user_id: @current_user_id)
c
artist
c
params
params\
c
params.except(:music_id, :artist_id, :mp3link, :current_user_id)
c
x
params
c
n
params[:music_id]
music
c
n
music
n
params
c
params
c
params
c
artist_id
params
c
params.merge(id: @current_user_id)
update_music(params,params.merge(id: @current_user_id))
c
artist_id
params
c
params
params.merge(artist_id: @current_user_id)
c
cookies
cookies&.[](cookie_name)
cookie_name
n
step
c
n
step
cookies
current_user_id(:artist)
c
n
c
res
n
JWT.decode(cookie_value, SECRET_KEY)
cookie_value
cookie_name
res
c
is_listener
n
music_session_user[:user_type]&.to_sym == user_type.to_sym
user_type.to_sym
music_session_user[:user_type]&.to_sym
usic_session_user[:user_type]&.to_sym == user_type.to_sym
n
JSON.parse(res[0] || "{}", symbolize_names: true)
n
'n
res
n
cookie_name
cookie_value
c
w2aqc
c
music_session_user[:user_type]&.to_sym == user_type.to_sym
n
c
is_artist
n
user_type
music_session_user
n
c
is_listener
n
music_session_user
n
res
n
cookie_value
n
cookie_name
n
music_session_#{user_type}
user_type
c
n
cookie_value
c
user_session[:user_id]
n
JSON.parse(res[0] || "{}", symbolize_names: true)
res
c
n
c
 JWT.decode(cookies&.[]("#{user_type}_session".to_sym), SECRET_KEY)
c
JWT.decode(cookies&.[]("#{user_type}_session".to_sym), SECRET_KEY)
n
c
encrypted_data
n
c
subscription
n
c
Subscription
c
cc
c
::Subscription
c
Artist
Subscriptions
Subscription
listener
artist
c
n
res
n
c
res
n
c
res
n
c
res.keys
n
res
n
c
res.keys
n
res
n
ListeningHistory.group(:music_id).order('count_music_id DESC').count('music_id').first(10)
c
music.length
music.class
music
n
Music.where("title LIKE ?", "%#{keyword}%")
c
Music.where("title LIKE ?", "%#{keyword}%")
c
history
ListeningHistory.new(music_id: params[:music_id], listener_id: params[:listener_id])
c
ListeningHistory.new(music_id: [:music_id], listener_id: params[:listener_id])
history
c
n
c
n
Music.exists?(params[:music_id])
c
n
params
c
n
c
is_artist
c
is_listener
c
n
music_session_user[:user_type]&.to_sym == user_type.to_sym
n
step
c
n
c
n
step
c
n
auth_for_music(:listener)
c
n
